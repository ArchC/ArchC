/*



*/


#ifndef _PARSER_ACASM_H_
#define _PARSER_ACASM_H_



/*
  A general structure to hold string list. Not sure if here is the best place to have it.
*/
typedef struct _strlist {
  char *str;
  struct _strlist *next;
} strlist;



/**********************************************
 ACASM parser structures

**********************************************/

/*
  Structure used to hold a symbol element in an 'ac_asm_map' declaration.
*/
typedef struct _ac_asm_symbol {
  char *symbol;                     /* the symbol name */
  int value;                        /* symbol's value */
  struct _ac_asm_symbol *next;      /* pointer to next symbol element */
} ac_asm_symbol;


/*
  Structure used to hold an 'ac_asm_map' declaration. It's made up of a marker (a mapping name), and a symbol list
representing the mapping between strings and values.
*/
typedef struct _ac_asm_map_list {
  char *marker;                    /* mapping name - must be unique */
  int used_where;                  /* 0 - not used, 1 - operand, 2 - mnemonic, 3- both of them */
  ac_asm_symbol *symbol_list;      /* symbol mapping list */
  struct _ac_asm_map_list *next;   /* pointer to next ac_asm_map element */
} ac_asm_map_list;


/*
  It's the main acasm structure. It represents an instruction (insn) as seen by the acasm module.
  You can think of it as an expansion of the ac_dec_instr structure, used by the decoder.
*/
typedef struct _ac_asm_insn {
  char *mnemonic;             /* mnemonic part of asm syntax */
  char *operand;              /* operand part - may be NULL */
  ac_dec_instr *insn;         /* pointer to original ac_dec_instr - NULL if it's a pseudo insn */
  long int const_image;       /* image built from the constant fields of this insn */
  strlist *pseudolist;        /* if a pseudo insn, it holds a list of the insns that make up the pseudo */
  long num_pseudo;            /* number of pseudo insns - only for speed reasons */
  struct _ac_asm_insn *next;  /* pointer to next element */
} ac_asm_insn;



/**********************************************
 ACASM parser exported functions
 For further hints, look at the .c file

**********************************************/


/*
 Parser interface functions
*/

/* ac_asm_map relative functions */
extern int acpp_asm_create_mapping_block(char *marker, char *error_msg);
extern int acpp_asm_add_mapping_symbol(char *symbol, char *error_msg);
extern int acpp_asm_add_mapping_symbol_range(char *sb, char *sa, int r1, int r2, char *error_msg);
extern int acpp_asm_add_symbol_value(int val1, int val2, char *error_msg);


/* set_asm relative functions */
extern void acpp_asm_new_insn();
extern int acpp_asm_parse_asm_string(char *asm_str, int is_pseudo, char *error_msg); /* also used by pseudo_op */
extern int acpp_asm_parse_asm_argument(ac_dec_format *pf, char *field_str, char *error_msg);
extern int acpp_asm_parse_const_asm_argument(ac_dec_format *pf, char *field_str, int iconst_field, char *sconst_field, char *error_msg);
extern int acpp_asm_end_insn(ac_dec_instr *p, char *error_msg); /* also used by pseudo_op */


/* pseudo_op relative functions */
extern void acpp_asm_new_pseudo();
extern int acpp_asm_add_pseudo_member(char *pseudo, char *error_msg);





/*
 Acasm interface functions
*/

/* gets the pointer to the acasm insn list generated by the parser */
extern ac_asm_insn* ac_asm_get_asm_insn_list();

/* gets the pointer to the acasm map list generated by the parser */
extern ac_asm_map_list* ac_asm_get_mapping_list();




/* encodes field 'pfield' of insn format 'pformat' with value field_value */
extern unsigned int ac_asm_encode_insn_field(unsigned int field_value, ac_dec_format *pformat, ac_dec_field *pfield);



#endif /* _PARSER_ACASM_H */
