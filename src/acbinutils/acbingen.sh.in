#!/bin/sh


#
# command line parsing
#
me=`echo "$0" | sed -e 's,.*/,,'`

usage="\
Usage: $0 [options] <model-file>

Create binary utilities source files and optionally build them.

Options:
  -a<name>   sets the architecture name (if ommitted, it defaults to 
             <model-file> without the extension
  -i<dir>    build and install the binary utilities in directory <dir>
             NOTE: <dir> -MUST- be an absolute path
  -c         only create the files, do not copy to binutils tree
  -h         print this help
  -v         print version number

Report bugs and patches to ArchC Team."

version="\
ArchC binutils generator script version @VERSION@"

help="
Try \`$me -h for more information."

ARCH_NAME=""
CREATE_ONLY=0
BINUTILS_INST_DIR=""
PATCH_BINUTILS=1  #1 means to patch, 0 otherwise
TEMP_DIR="acbingenbuilddir"

# Parse command line
while getopts  ":hvca:i:" flag
do
  case $flag in
    h) echo "$usage"; exit 0 ;;
    v) echo "$version" ; exit 0 ;;
    c) CREATE_ONLY=1 ;;
    a) ARCH_NAME="$OPTARG" ;;
    i) BINUTILS_INST_DIR="$OPTARG" ;;
    *) echo "$me: invalid option $help"
       exit 1 ;;
  esac
done
shift $(($OPTIND - 1))

case $# in
 0 ) echo "No model file specified"
     exit 1 ;;
 1 ) MODEL_FILE=$1 ;;
 * ) echo "Too many arguments"
     exit 1;;
esac

if [ ! -f $MODEL_FILE ]; then
  echo "File does not exist: $MODEL_FILE"
  exit 1
fi

if [ -z "$ARCH_NAME" ]; then
  ARCH_NAME=`echo "$MODEL_FILE" | sed -e "s/\..*$//"`
fi

ARCH_INVALID_CHAR=`echo "$2" | sed -e 's/[a-zA-Z][_a-zA-Z0-9]*//'`

if [ ! -z "$ARCH_INVALID_CHAR" ]; then
  echo "Invalid architecture name: ${ARCH_NAME}"  
  echo "Valid characters include letters, numbers and underscore (only"\
       "letters can begin a name)."
  exit 1
fi

if [ -z "$BINUTILS_PATH" ]; then
  BINUTILS_PATH=`grep BINUTILS_PATH @sysconfdir@/archc.conf | cut -d = -f2`
  BINUTILS_PATH=`echo $BINUTILS_PATH`
  
  if [ -z "$BINUTILS_PATH" ]; then
    echo "BINUTILS_PATH environment variable not set"
    exit 1
  fi 
fi


# check for '/' at the end and take it out
BINUTILS_DIR=`echo "$BINUTILS_PATH" | sed -e 's/\/$//'`


FILES_TO_PATCH="@patchfiles@" 
FILES_TO_COPY="@copyfiles@"


if [ "$CREATE_ONLY" -eq 0 ]; then
# tell the user if the architecture name already exists in Binutils
  $BINUTILS_DIR/config.sub ${ARCH_NAME}-elf > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "==================="
    echo "It has been detected that your Binutils distribution already uses"
    echo "the architecture name '${ARCH_NAME}'."
    echo
    echo "It is not recommended to continue if you have not set it by yourself."
#  echo "If you continue, the Binutils files will not be patched."
    echo "==================="
    echo
    read -e -p "Do you wish to continue? (y) -> " USER_ANSWER; : ${USER_ANSWER:="y"}
    echo
    case $USER_ANSWER in 
        y | yes | Y | YES) PATCH_BINUTILS=0; break;;
        * ) echo "Quitting ..."; echo; exit 1;;
    esac
  fi
fi

# creates binutils directory tree (if none was built)
mkdir -p $TEMP_DIR
[ $? -ne 0 ] && exit $?
cp -rf @pkgdatadir@/binutils ${TEMP_DIR}/


# generate the files in the binutils tree
echo "Generating machine dependent code..."
@bindir@/bmdsfg $MODEL_FILE -a${ARCH_NAME}
[ $? -ne 0 ] && exit $?

cd $TEMP_DIR

# change the name of template files
m4 -P defines.m4 binutils/ld/emulparams/xxxxxelf.sh > binutils/ld/emulparams/${ARCH_NAME}elf.sh
m4 -P defines.m4 binutils/include/opcode/xxxxx.h > binutils/include/opcode/${ARCH_NAME}.h
m4 -P defines.m4 binutils/bfd/cpu-xxxxx.c > binutils/bfd/cpu-${ARCH_NAME}.c
m4 -P defines.m4 binutils/gas/config/tc-xxxxx.h > binutils/gas/config/tc-${ARCH_NAME}.h
m4 -P defines.m4 binutils/opcodes/xxxxx-opc.c > binutils/opcodes/${ARCH_NAME}-opc.c
m4 -P defines.m4 binutils/opcodes/xxxxx-dis.c > binutils/opcodes/${ARCH_NAME}-dis.c
m4 -P defines.m4 binutils/include/elf/xxxxx.h > binutils/include/elf/${ARCH_NAME}.h
m4 -P defines.m4 binutils/bfd/elf32-xxxxx.c > binutils/bfd/elf32-${ARCH_NAME}.c
m4 -P defines.m4 binutils/gas/config/tc-xxxxx.c > binutils/gas/config/tc-${ARCH_NAME}.c


if [ "$CREATE_ONLY" -ne 0 ]; then
  echo "Done. No files copied."
  echo
  exit 0
fi

if [ "$PATCH_BINUTILS" -ne 0 ]; then
# applies the patch 
    echo "Patching... "
    for file in $FILES_TO_PATCH
    do
      
      if [ ! -f "$BINUTILS_DIR/$file" ]; then

	    if [ $file = "gas/configure.tgt" ]; then
	      # Starting from 2.16, binutils uses configure.tgt
	      # For compatibility with older versions, redirect to 'configure'
	      file="gas/configure"
	      cp -f binutils/gas/configure.tgt.sed binutils/gas/configure.sed > /dev/null 2>&1
	    else           	  
  	      echo "Source file $file not found."
  	      exit 1
        fi
      fi

  # creates a backup
      mv -f $BINUTILS_DIR/$file $BINUTILS_DIR/$file.bkp > /dev/null 2>&1
      if [ $? -ne 0 ]; then
	  echo "Cannot move file $file."
	  exit 1
      fi

      sed s/xxxxx/${ARCH_NAME}/g binutils/$file.sed > binutils/$file.sed2
      sed -f binutils/$file.sed2 $BINUTILS_DIR/$file.bkp > $BINUTILS_DIR/$file

    done
   
    chmod a+x $BINUTILS_DIR/config.sub
    chmod a+x $BINUTILS_DIR/bfd/config.bfd

else
    echo "Skipping patching..."
fi

# copies the generated files into binutils tree
echo "Copying files to binutils source tree..."
for file in $FILES_TO_COPY
do
  cpfile=`echo "$file" | sed -e "s/xxxxx/${ARCH_NAME}/g"`
  cp -f binutils/${cpfile} $BINUTILS_DIR/${cpfile}
  [ $? -ne 0 ] && exit $?
done

if [ ! -z ${BINUTILS_INST_DIR} ]; then
  echo "Installing the binary utilities..."
 
  mkdir -p build
  cd build
  $BINUTILS_DIR/configure --target=${ARCH_NAME}-elf --prefix=`pwd` --bindir=${BINUTILS_INST_DIR}
  [ $? -ne 0 ] && exit $?
  make 
  [ $? -ne 0 ] && exit $?
  make install
  [ $? -ne 0 ] && exit $?
fi

echo "All done successfully."
echo

