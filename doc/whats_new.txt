WHAT'S NEW IN ARCHC 2.0
-----------------------

Greetings, ArchC user!

In this document, you will find a high-level description of the ArchC
changes in this 2.0 beta version, relative to 1.6.x stable, concerning
the simulation tool.


1. Speed improvements in interpreted simulator.

   It's as simple as that: the programs you used to run using a
   simulator generated by the acsim tool of ArchC 1.6.x will most
   likely run faster in the new simulators generated by the ArchC 2.0
   version of acsim. The code generated by acsim was cleaned up
   considerably, as well as some of the library code, so that these
   speed improvements could be achieved. Speedups of around 3x are not
   uncommon.

   As an example, we ran the qsort_small benchmark from mibench on our
   sparcv8 model, compiling both generated simulators with g++-3.3.6
   using the -O2 optimization flag. On the same machine (a Mobile
   Celeron 1.7GHz with 512MB of RAM running stock Ubuntu Linux 5.10),
   the benchmark ran 328.71K instructions/second with the ArchC 1.6
   simulator, and 1285.24K instructions/second with the 2.0 beta
   simulator, which is a pretty nice speedup.


2. Self-contained simulators.

   The interpreted simulators generated by the acsim tool of ArchC 2.0
   are, unlike those from 1.6, completely self-contained: that is,
   they don't use global variables nor static members, thus allowing
   the user to run multiple instances of a simulator in the same
   SystemC simulation, as well as multiple simulators (for instance, a
   mix of mips1 and sparcv8).

   This important change not only resulted in improved quality for the
   generated code, but also was crucial to fulfill our goal of
   allowing ArchC simulator modules to be used in the simulation of
   heterogeneous multiprocessor SoCs.

   A WARNING regarding existent models: models developed for ArchC
   1.6.x will not work in ArchC 2.0 without modifications, mainly
   because they are self-contained. Please check the
   doc/porting_to_2.txt document for info on how to port those models
   to ArchC 2.0. Provided that your model is well-coded, the changes
   necessary for the port are minimal.


3. TLM communication capabilities

   ArchC 2.0 now provides TLM initiator ports in its library, so that
   a simulator module is able to communicate with external modules,
   therefore being capable of participating as a processing unit on a
   transaction-level model of a whole system.

   This is the main focus of the ArchC 2.0 development: providing
   tools, especially the generated simulators, that can be seamlessly
   integrated into modern TLM-driven multiprocessor SoC design
   methodologies.

   The ArchC TLM capabilities are further rounded by its support for
   interrupts. Now it's possible to declare an interrupt port on a
   processor model, so that the simulator generated by acsim contains
   an interrupt port. All the writes to interrupt ports trigger the
   correspondent interrupt handler mechanism, which needs to be
   implemented in the model. The handler code goes inside an
   ac_behavior() declaration, which is very much alike the
   ac_behavior() declarations for instructions, although they appear
   on a separate file.


   These are the basic new features you will find in this beta version
   of ArchC 2.0. For instructions on how to port models, check the
   doc/porting_to_2.txt. This file is also very interesting if you're
   writing your new model directly for ArchC 2.0 because it offers
   great guidelines and coding practices on how to write great models.

   Also, the doc/tlm_howto.txt document is a great point to look for
   info on how to use the TLM capabilities of ArchC. It describes in
   detail how to use all of the new TLM features so that there should
   be no problem using them.

   If, even after reading our documentation, should you encounter
   problems in using any of the new features of ArchC, feel free to
   contact the ArchC team, preferably via the forums. We'll be there
   to answer your questions, and hear about bugs or things like that.

All the best,

 -- The ArchC Team
