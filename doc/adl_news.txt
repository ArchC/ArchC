NEW FEATURES ADDED TO THE ARCHC LANGUAGE

* ac_group                                                           (2.0beta3)

 Allows the user to group instructions (and test whether an instruction belongs
to a group at runtime) in any way that is convenient. Group declarations should
begin after all instruction declarations in the ISA description file and use the
following syntax:

ac_group groupname { instr1 [, ...] };

 At least one instruction must be in each group.

 The simulators can use instruction groups through the group query methods,
which are follow the naming convention belongs_to_groupname(), where groupname
is the name of an instruction group. Both acsim and actsim support the version
of these methods that takes no arguments, and actsim also supports a version
that takes one argument of type unsigned, which is the numeric id of the
instruction being queried. As of 2.0beta3, there is not much practical use for
this version of the group query methods.

 Code example:

- ISA description

ac_group bitlogic {instr_and, andi, instr_or, ori, instr_xor, xori, instr_nor};

- Some behavior

if (belongs_to_bitlogic())
{
 // some code
}

* ac_helper                                                          (2.0beta3)

 Any "helper" code will be inserted into the class definition of the model's
ISA, which is instantiated with each simulator. This feature aims to be a
multiple instance-compatible alternative to "globals" in the ISA implementation
file. It should precede any instruction format declarations in the ISA
definition file. The syntax is:

ac_helper
{
 // C++ declarations (keep in mind that this will go in a class definition)
};

 Blanks (such as newline and spaces) before the left brace are optional.

